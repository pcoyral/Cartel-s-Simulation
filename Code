import threading
import queue
import random
import time

# Configuration
NUM_FARMERS = 20
NUM_CHEMISTS = 10
LEAF_STORAGE_CAPACITY = 40
COCAINE_STORAGE_CAPACITY = 50
LEAVES_NEEDED_FOR_PROCESS = 3
TRANSPORT_TYPES = [
    {"name": "Plane", "capacity": 15, "speed": 10},
    {"name": "Boat", "capacity": 30, "speed": 25},
    {"name": "Truck", "capacity": 10, "speed": 20}
]

# Shared resources
leaf_storage = queue.Queue(maxsize=LEAF_STORAGE_CAPACITY)
cocaine_storage = {"quantity": 0, "lock": threading.Condition()}

class Farmer(threading.Thread):
    def __init__(self, farmer_id):
        super().__init__(daemon=True)
        self.farmer_id = farmer_id
        self.productivity = random.uniform(0.8, 1.2)

    def run(self):
        while True:
            print(f"Farmer {self.farmer_id}: 🌱 Planting coca seeds...")
            time.sleep(random.randint(2, 5) * self.productivity)
            
            if random.random() < 0.1:
                print(f"Farmer {self.farmer_id}: 😴 Took a siesta")
                continue
                
            try:
                leaf_storage.put(f"Leaf-{self.farmer_id}", block=False)
                print(f"Farmer {self.farmer_id}: 🍃 Stored leaf (Total: {leaf_storage.qsize()})")
            except queue.Full:
                print(f"Farmer {self.farmer_id}: ❌ Storage full! Lost harvest")

class Chemist(threading.Thread):
    def __init__(self, chemist_id):
        super().__init__(daemon=True)
        self.chemist_id = chemist_id
        self.process_time = random.randint(4, 7)

    def run(self):
        while True:
            # Collect leaves for processing
            leaves = []
            for _ in range(LEAVES_NEEDED_FOR_PROCESS):
                leaves.append(leaf_storage.get())

            # Process into cocaine
            print(f"Chemist {self.chemist_id}: 🧪 Processing {len(leaves)} leaves into cocaine...")
            time.sleep(self.process_time)

            # Store final product
            with cocaine_storage["lock"]:
                while cocaine_storage["quantity"] >= COCAINE_STORAGE_CAPACITY:
                    cocaine_storage["lock"].wait()  # Wait until storage has space

                cocaine_storage["quantity"] += 1  # Add cocaine after processing
                print(f"Chemist {self.chemist_id}: 💼 Produced cocaine (Stock: {cocaine_storage['quantity']})")
                cocaine_storage["lock"].notify_all()  # Notify that cocaine is available


class Distributor(threading.Thread):
    def __init__(self, transport_id, name, capacity, speed):
        super().__init__(daemon=True)
        self.transport_id = transport_id
        self.name = name
        self.capacity = capacity
        self.speed = speed

    def run(self):
        while True:
            with cocaine_storage["lock"]:
                # Wait until there is at least 1 unit of cocaine
                while cocaine_storage["quantity"] < 1:
                    cocaine_storage["lock"].wait()

                # Safely withdraw cocaine
                shipment = min(self.capacity, cocaine_storage["quantity"])
                cocaine_storage["quantity"] -= shipment

                print(f"{self.name} {self.transport_id}: 🚚 Shipped {shipment} units (Remaining: {cocaine_storage['quantity']})")

                # Notify producers in case they were waiting for storage space
                cocaine_storage["lock"].notify_all()

            # Simulate delivery time
            time.sleep(self.speed)
            print(f"{self.name} {self.transport_id}: ✅ Delivered {shipment} cocaine units")


# Create simulation entities
farmers = [Farmer(i) for i in range(NUM_FARMERS)]
chemists = [Chemist(i) for i in range(NUM_CHEMISTS)]
distributors = [Distributor(i, **t) for i, t in enumerate(TRANSPORT_TYPES)]

# Start all threads
for entity in farmers + chemists + distributors:
    entity.start()

# Monitor system status
try:
    while True:
        time.sleep(5)
        print("\n=== SYSTEM STATUS ===")
        print(f"Leaves waiting processing: {leaf_storage.qsize()}/{LEAF_STORAGE_CAPACITY}")
        print(f"Cocaine inventory: {cocaine_storage['quantity']}/{COCAINE_STORAGE_CAPACITY}")
        print("Active shipments:", [f"{d.name} {d.transport_id}" for d in distributors if d.is_alive()])
        print("====================\n")
except KeyboardInterrupt:
    print("🛑 Simulation stopped")
