#Farmers
#Chemists
#Wharehouse
#Transports
#Bankaccount

import random
import time

class CocaLeaf:
    def __init__(self, creation_time):
        self.growth_duration = random.randint(5, 15)  # Seconds
        self.ready_time = creation_time + self.growth_duration
        self.collected = False

class Farmer:
    def __init__(self):
        self.current_task = None
        self.collection_duration = 2  # Seconds per leaf
    
    def collect_leaves(self, leaves, current_time):
        ready_leaves = [leaf for leaf in leaves if not leaf.collected and current_time >= leaf.ready_time]
        if ready_leaves:
            self.current_task = {
                'start_time': current_time,
                'duration': len(ready_leaves) * self.collection_duration,
                'leaves': ready_leaves
            }
        return self.current_task is None

class Chemist:
    def __init__(self):
        self.current_task = None
        self.processing_duration = 5  # Seconds per unit
    
    def process_leaves(self, leaves, current_time):
        if leaves and not self.current_task:
            self.current_task = {
                'start_time': current_time,
                'duration': len(leaves) * self.processing_duration,
                'leaves': leaves
            }
        return self.current_task is None

class Storage:
    def __init__(self):
        self.cocaine = 0
        self.transportation = []

class Transportation:
    def __init__(self, name, capacity, speed):
        self.name = name
        self.capacity = capacity
        self.speed = speed
        self.current_shipment = None

def simulation_loop():
    # Initialize components
    clock = 0
    leaves = [CocaLeaf(0) for _ in range(10)]  # Initial batch
    farmer = Farmer()
    chemist = Chemist()
    storage = Storage()
    transports = [
        Transportation("Plane", 50, 8),
        Transportation("Boat", 200, 20),
        Transportation("Truck", 100, 12)
    ]
    
    while True:
        # Farmer logic
        if farmer.current_task is None:
            farmer.collect_leaves(leaves, clock)
        else:
            if clock >= farmer.current_task['start_time'] + farmer.current_task['duration']:
                for leaf in farmer.current_task['leaves']:
                    leaf.collected = True
                farmer.current_task = None

        # Chemist logic
        collected_leaves = [leaf for leaf in leaves if leaf.collected]
        if chemist.current_task is None and collected_leaves:
            chemist.process_leaves(collected_leaves, clock)
        elif chemist.current_task and clock >= chemist.current_task['start_time'] + chemist.current_task['duration']:
            storage.cocaine += len(chemist.current_task['leaves'])
            chemist.current_task = None

        # Transportation logic
        for transport in transports:
            if storage.cocaine > 0 and transport.current_shipment is None:
                amount = min(transport.capacity, storage.cocaine)
                transport.current_shipment = {
                    'start_time': clock,
                    'amount': amount
                }
                storage.cocaine -= amount
            elif transport.current_shipment and clock >= transport.current_shipment['start_time'] + transport.speed:
                print(f"{transport.name} delivered {transport.current_shipment['amount']} units")
                transport.current_shipment = None

        # Advance simulation time
        time.sleep(1)
        clock += 1
        print(f"Time: {clock}s - Storage: {storage.cocaine} units")

# Start simulation
simulation_loop()
